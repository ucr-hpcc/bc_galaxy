# Export the module function if it exists
[[ $(type -t module) == "function" ]] && export -f module



#Set working directory

<%

working_dir = Pathname.new(context.working_dir)

# Ensure that galaxy-server always starts up in either a user defined directory or the home directory.
if ! working_dir.exist?
    working_dir = Pathname.new(ENV['HOME'])
elsif working_dir.file?
    working_dir = working_dir.parent
end

%>

export DATAROOT="<%= working_dir.to_s %>"/.galaxy

# Find available port to run server on
export port=$(find_port)


#Load in modules
<%- unless context.modules.blank? -%>
# Purge the module environment to avoid conflicts
module purge

module load <%= context.extra_modules %>

# Load the required modules
module load <%= context.modules  %>

# List loaded modules
module list
<%- end -%>



module load galaxy

# Define Galaxy Variables
export GALAXY_PATH="$(dirname $(which run.sh))"
export GALAXY_ROOT_DIR=${GALAXY_PATH}
export GALAXY_CONFIG_FILE="${PWD}/galaxy.yml"
export EMAIL="${USER}@ondemand.hpcc.ucr.edu"
export JOB_CONFIG_FILE_PATH="${PWD}/job_conf.xml"
export JOB_RESOURCE_PARAMS_CONF_FILE_PATH="${PWD}/job_resource_params_conf.xml"
export WORKFLOW_RESOURCE_PARAMS_CONF_FILE_PATH="${PWD}/workflow_resource_params_conf.xml"
export ENVIORNMENT_MODULES_MAPPING_FILE_PATH="${PWD}/environment_modules_mapping.yml"

#For testing local galaxy instances
#export GALAXY_PATH="<%= BatchConnect::App.from_token(session.token).root.realpath.join("24.1").to_s %>"

echo "GALAXY config file location: '${GALAXY_CONFIG_FILE}'"
echo "Data location: '${DATAROOT}'"



#Generare environment modules mapping file
#extra_modules=(<%= context.extra_modules %>)
#for module in ${extra_modules}
#do
#  (
#umask 077
#cat > "${ENVIORNMENT_MODULES_MAPPING_FILE_PATH}" << EOL
#<?xml version="1.0"?>
#<tool id="${module}" name="${module}" >
#  <description>
#    Please vist our github for examples on how to each this module 
#    https://github.com/ucr-hpcc/hpcc_slurm_examples
#   </description>
#  </tool>
#EOL
#  )
#done
# Generate Galaxy job configuration file
(
umask 077
cat > "${JOB_CONFIG_FILE_PATH}" << EOL
<?xml version="1.0"?>
<!-- A sample job config that explicitly configures job running the way it is configured by default (if there is no explicit config). -->
<job_conf>
    <plugins>
        <plugin id="local" type="runner" load="galaxy.jobs.runners.local:LocalJobRunner" workers="4"/>
    </plugins>
    <destinations>
        <destination id="local" runner="local"/>
    </destinations>
</job_conf>
EOL
)

# Generate Galaxy job resource parameter configuration file
(
umask 077
cat > "${JOB_RESOURCE_PARAMS_CONF_FILE_PATH}" << EOL
<parameters>
  <param label="Cores" name="cores" type="integer" min="1" max="28" value="1" help="Number of processing cores, 'ppn' value (1-28). Leave blank to use default value." />
  <param label="Walltime" name="time" type="integer" size="3" min="1" max="24" value="1" help="Maximum job time in hours, 'walltime' value (1-24). Leave blank to use default value." />
</parameters>
EOL
)


# Generate Galaxy workflow resource parameter configuration file
(
umask 077
cat > "${WORKFLOW_RESOURCE_PARAMS_CONF_FILE_PATH}" << EOL
<parameters>
    <param label="Processors" name="processors" type="integer" min="1" max="28" value="" help="Number of processing cores, 'ppn' value (1-28). Leave blank to use default value." />
    <param label="Memory" name="memory" type="integer" min="1" max="256" value="" help="Memory size in gigabytes, 'pmem' value (1-256). Leave blank to use default value." />
    <param label="Time" name="time" type="integer" min="1" max="744" value="" help="Maximum job time in hours, 'walltime' value (1-744). Leave blank to use default value." />
    <param label="Project" name="project" type="text" value="" help="Project to assign resource allocation to. Leave blank to use default value." />
    <param label="Workflow Job Priority" name="priority" type="select" value="med" help="What priority should the jobs in this workflow run at? (Overrides any declared job priority)">
        <option value="low" label="Low"/>
        <option value="med" label="Medium"/>
        <option value="high" label="High"/>
        <option value="ultra" label="Ultra"/>
        <option value="plus_ultra" label="Plus Ultra"/>
    </param>
</parameters>
EOL
)

# Generate Galaxy configuration file
(
umask 077
cat > "${GALAXY_CONFIG_FILE}" << EOL
gravity:
  galaxy_user : $USER
  gunicorn:
    enable: true
    bind: 0.0.0.0:${port}

galaxy:
  data_dir: ${DATAROOT}
  registration_warning_message: "The publicname and email MUST correspond to a user's netID and email on the cluster. 
  Passwords are not used for authentication but still MUST be filled out. It is advised to randomly generate passwords for users." 
  #Remote user options
  use_remote_user: true
  remote_user_header: HTTP_X_FORWARDED_USER
  allow_user_creation: false
  allow_user_deletion: true
  allow_user_impersonation: true
  #Tool shed and data config options 
  tool_dependency_dir: ${DATAROOT}/database/dependencies
  tool_data_path: ${DATAROOT}/tool-data
  #Import options
  library_import_dir: ${DATAROOT}/import-dir/
  user_library_import_symlink_allowlist: /bigdata,/rhome
  allow_path_paste: true
  #Data manager config options
  enable_data_manager_user_view: true
  galaxy_data_manager_data_path: ${DATAROOT}/tool-data
  #Config directory options
  config_dir: ${DATAROOT}/config
  #Job stuff
  job_resource_params_file: ${JOB_RESOURCE_PARAMS_CONF_FILE_PATH}
  workflow_resource_params_file: ${WORKFLOW_RESOURCE_PARAMS_CONF_FILE_PATH}
  admin_users: ${EMAIL}
  job_config_file: ${JOB_CONFIG_FILE_PATH}
  galaxy_url_prefix: /node/${HOSTNAME}/${port}
  dependency_resolvers:
    - type: tool_shed_packages
    - type: galaxy_packages
    - type: conda
    - type: galaxy_packages
      versionless: true
    - type: conda
      versionless: true
    - type: modules
      versionless: true
      modulecmd: /usr/bin/modulecmd
      modulepath: /opt/linux/rocky/8.x/x86_64/modules
      find_by: avail
      prefetch: true
      default_indicator: "default"
EOL
)
